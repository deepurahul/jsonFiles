{
  "openapi": "3.0.1",
  "info": {
    "title": "buyerPlanningItemStockouts",
    "version": "11.13.18.05"
  },
  "servers": [
    {
      "url": "REPLACE_SERVER_URL"
    }
  ],
  "tags": [
    {
      "name": "buyerPlanningItemStockouts"
    }
  ],
  "paths": {
    "/buyerPlanningItemStockouts/itemOrgStockoutCounts": {
      "post": {
        "tags": [
          "buyerPlanningItemStockouts"
        ],
        "summary": "itemOrgStockoutCounts for Buyer Planning",
        "description": "itemOrgStockoutCounts for Buyer Planning",
        "operationId": "post_itemOrgStockoutCounts",
        "parameters": [
          {
            "name": "REST-Framework-Version",
            "in": "header",
            "description": "The protocol version between a REST client and service. If the client does not specify this header in the request the server will pick a default version for the API.",
            "schema": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
              ]
            }
          },
          {
            "name": "Metadata-Context",
            "in": "header",
            "description": "If the REST API supports runtime customizations, the shape of the service may change during runtime. The REST client may isolate itself from these changes or choose to interact with the latest version of the API by specifying this header. For example: Metadata-Context:sandbox=\"TrackEmployeeFeature\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The following table describes the body parameters in the request for this task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemOrgStockoutCountsItem"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "The following table describes the default response for this task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemOrgStockoutCountsItem-response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/buyerPlanningItemStockouts/itemStockoutCount": {
      "post": {
        "tags": [
          "buyerPlanningItemStockouts"
        ],
        "summary": "itemStockoutCount for Buyer Planning",
        "description": "itemStockoutCount for Buyer Planning",
        "operationId": "post_itemStockoutCount",
        "parameters": [
          {
            "name": "REST-Framework-Version",
            "in": "header",
            "description": "The protocol version between a REST client and service. If the client does not specify this header in the request the server will pick a default version for the API.",
            "schema": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
              ]
            }
          },
          {
            "name": "Metadata-Context",
            "in": "header",
            "description": "If the REST API supports runtime customizations, the shape of the service may change during runtime. The REST client may isolate itself from these changes or choose to interact with the latest version of the API by specifying this header. For example: Metadata-Context:sandbox=\"TrackEmployeeFeature\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The following table describes the body parameters in the request for this task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemStockoutCountItem"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "The following table describes the default response for this task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemStockoutCountItem-response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/buyerPlanningItemStockouts/itemLocationStockouts": {
      "post": {
        "tags": [
          "buyerPlanningItemStockouts"
        ],
        "summary": "itemLocationStockouts for Buyer Planning",
        "description": "itemLocationStockouts for Buyer Planning",
        "operationId": "post_itemLocationStockouts",
        "parameters": [
          {
            "name": "REST-Framework-Version",
            "in": "header",
            "description": "The protocol version between a REST client and service. If the client does not specify this header in the request the server will pick a default version for the API.",
            "schema": {
              "type": "string",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
              ]
            }
          },
          {
            "name": "Metadata-Context",
            "in": "header",
            "description": "If the REST API supports runtime customizations, the shape of the service may change during runtime. The REST client may isolate itself from these changes or choose to interact with the latest version of the API by specifying this header. For example: Metadata-Context:sandbox=\"TrackEmployeeFeature\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The following table describes the body parameters in the request for this task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemLocationStockoutsItem"
              }
            }
          },
          "required": false
        },
        "responses": {
          "default": {
            "description": "The following table describes the default response for this task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemLocationStockoutsItem-response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "request"
      }
    }
  },
  "components": {
    "schemas": {
      "CollectionProperties": {
        "required": [
          "count",
          "hasMore",
          "limit",
          "links",
          "offset"
        ],
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "integer",
            "description": "The estimated row count when \"?totalResults=true\", otherwise the count is not included."
          },
          "count": {
            "type": "integer",
            "description": "The number of resource instances returned in the current range."
          },
          "hasMore": {
            "type": "boolean",
            "description": "Indicates whether more resources are available on the server than the subset returned in the response. If the value is true, then there are more resources to retrieve from the server. The default value is false."
          },
          "limit": {
            "type": "integer",
            "description": "The actual paging size used by the server."
          },
          "offset": {
            "type": "integer",
            "description": "The offset value used in the current page."
          },
          "links": {
            "title": "Links",
            "type": "array",
            "description": "The link relations associated with the resource instance.",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "ItemProperties": {
        "type": "object",
        "properties": {
          "links": {
            "title": "Links",
            "type": "array",
            "description": "The link relations associated with the resource instance.",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "link": {
        "type": "object",
        "properties": {
          "href": {
            "title": "hyperlink reference",
            "type": "string",
            "description": "The URI to the related resource."
          },
          "rel": {
            "title": "relation",
            "type": "string",
            "description": "The name of the relation to the resource instance.  Example: self.",
            "enum": [
              "self",
              "lov",
              "parent",
              "canonical",
              "child",
              "enclosure",
              "action",
              "custom"
            ]
          },
          "name": {
            "title": "name",
            "type": "string",
            "description": "The name of the link to the related resource."
          },
          "kind": {
            "title": "kind",
            "type": "string",
            "description": "The kind of the related resource.",
            "enum": [
              "collection",
              "item",
              "describe",
              "other"
            ]
          },
          "properties": {
            "type": "object",
            "properties": {
              "changeIndicator": {
                "type": "string",
                "description": "Change indicator or the ETag value of the resource instance."
              }
            }
          }
        }
      },
      "buyerPlanningItemStockouts-itemOrgStockoutCountsItem-response": {
        "type": "object",
        "properties": {
          "OrganizationCode": {
            "title": "OrganizationCode",
            "type": "string",
            "description": "OrganizationCode of result."
          },
          "StockoutCount": {
            "type": "integer",
            "description": "StockoutCount for given OrganizationCode.",
            "format": "int64"
          }
        }
      },
      "buyerPlanningItemStockouts-itemOrgStockoutCountsItem": {
        "type": "object",
        "properties": {
          "PlanId": {
            "type": "integer",
            "description": "Value that uniquely identifies the plan.",
            "format": "int64"
          },
          "StartDate": {
            "type": "string",
            "description": "StartDate of filter."
          },
          "EndDate": {
            "type": "string",
            "description": "EndDate of filter."
          }
        }
      },
      "buyerPlanningItemStockouts-itemStockoutCountItem-response": {
        "type": "object",
        "properties": {
          "ItemStockoutCount": {
            "type": "integer",
            "description": "ItemStockoutCount for given OrganizationCode.",
            "format": "int64"
          }
        }
      },
      "buyerPlanningItemStockouts-itemStockoutCountItem": {
        "type": "object",
        "properties": {
          "PlanId": {
            "type": "integer",
            "description": "Value that uniquely identifies the plan.",
            "format": "int64"
          },
          "StartDate": {
            "type": "string",
            "description": "StartDate of filter."
          },
          "EndDate": {
            "type": "string",
            "description": "EndDate of filter."
          }
        }
      },
      "buyerPlanningItemStockouts-itemLocationStockoutsItem-response": {
        "type": "object",
        "properties": {
          "Item": {
            "type": "string",
            "description": "Item."
          },
          "ItemDescription": {
            "type": "string",
            "description": "ItemDescription."
          },
          "InventoryItemId": {
            "type": "integer",
            "description": "InventoryItemId.",
            "format": "int64"
          },
          "Location": {
            "type": "string",
            "description": "Location."
          },
          "StockoutCount": {
            "type": "integer",
            "description": "StockoutCount.",
            "format": "int64"
          },
          "SafetyStockoutViolationCount": {
            "type": "integer",
            "description": "SafetyStockoutViolationCount.",
            "format": "int64"
          }
        }
      },
      "buyerPlanningItemStockouts-itemLocationStockoutsItem": {
        "type": "object",
        "properties": {
          "PlanId": {
            "type": "integer",
            "description": "Value that uniquely identifies the plan.",
            "format": "int64"
          },
          "StartDate": {
            "type": "string",
            "description": "StartDate of filter."
          },
          "EndDate": {
            "type": "string",
            "description": "EndDate of filter."
          }
        }
      }
    },
    "responses": {
      "buyerPlanningItemStockouts-itemOrgStockoutCounts-item-response": {
        "description": "The following table describes the default response for this task.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemOrgStockoutCountsItem-response"
            }
          }
        }
      },
      "buyerPlanningItemStockouts-itemStockoutCount-item-response": {
        "description": "The following table describes the default response for this task.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemStockoutCountItem-response"
            }
          }
        }
      },
      "buyerPlanningItemStockouts-itemLocationStockouts-item-response": {
        "description": "The following table describes the default response for this task.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemLocationStockoutsItem-response"
            }
          }
        }
      }
    },
    "parameters": {
      "expand": {
        "name": "expand",
        "in": "query",
        "description": "When this parameter is provided, the specified children are included in the resource payload (instead of just a link). The value of this query parameter is \"all\" or \"\". More than one child can be specified using comma as a separator. Example: ?expand=Employees,Localizations. Nested children can also be provided following the format \"Child.NestedChild\" (Example: ?expand=Employees.Managers). If a nested child is provided (Example: Employees.Managers), the missing children will be processed implicitly. For example, \"?expand=Employees.Managers\" is the same as \"?expand=Employees,Employees.Managers\" (which will expand Employees and Managers).",
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "name": "fields",
        "in": "query",
        "description": "This parameter filters the resource fields. Only the specified fields are returned, which means that if no fields are specified, no fields are returned (useful to get only the links). If an indirect child resource is provided (Example: Employees.Managers), the missing children will be processed implicitly. For example, \"?fields=Employees.Managers:Empname\" is the same as \"?fields=;Employees:;Employees.Managers:Empname\" (which will only return the \"Empname\" field for Managers). the value of this query parameter is a list of resource fields. The attribute can be a direct (Example: Employees) or indirect (Example: Employees.Managers) child. It cannot be combined with expand query parameter. If both are provided, only fields will be considered.<br><br>Format: ?fields=Attribute1,Attribute2<br><br>Format for fields in child resource: ?fields=Accessor1:Attribute1,Attribute2",
        "schema": {
          "type": "string"
        }
      },
      "onlyData": {
        "name": "onlyData",
        "in": "query",
        "description": "The resource item payload will be filtered in order to contain only data (no links section, for example).",
        "schema": {
          "type": "boolean"
        }
      },
      "dependency": {
        "name": "dependency",
        "in": "query",
        "description": "This parameter specifies dependencies which are fields that are set before and rolled back after generating the response. Generally they are used to preview the effects of an attribute change. The fields specified in this parameter are always set in the resource instance in question. When a child resource collection is requested and the parameter is set, the fields will be set in the parent resource instance before generating the resource collection payload. The value of this query parameter is a set of dependency fields.  Example: dependency=ProductId=2<br><br>Format: &lt;attr1&gt;=&lt;val1&gt;,&lt;attr2&gt;=&lt;value2&gt;",
        "schema": {
          "type": "string"
        }
      },
      "links": {
        "name": "links",
        "in": "query",
        "description": "This parameter can be used to show only certain links while accessing a singular resource or a resource collection. The parameter value format is a comma-separated list of : &lt;link_relation&gt;<br><br>Example:<br>self,canonical<br>",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "This parameter restricts the number of resources returned inside the resource collection. If the limit exceeds the resource count then the framework will only return the available resources.",
        "schema": {
          "type": "integer"
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Used to define the starting position of the resource collection. If offset exceeds the resource count then no resources are returned. Default value is 0.",
        "schema": {
          "type": "integer"
        }
      },
      "totalResults": {
        "name": "totalResults",
        "in": "query",
        "description": "The resource collection representation will include the \"estimated row count\" when \"?totalResults=true\", otherwise the count is not included.  The default value is \"false\".",
        "schema": {
          "type": "boolean"
        }
      },
      "q": {
        "name": "q",
        "in": "query",
        "description": "This query parameter defines the where clause. The resource collection will be queried using the provided expressions. The value of this query parameter is one or more expressions. Example: ?q=Deptno&gt;=10 and &lt;= 30;Loc!=NY <br><br>Format: ?q=expression1;expression2",
        "schema": {
          "type": "string"
        }
      },
      "orderBy": {
        "name": "orderBy",
        "in": "query",
        "description": "This parameter orders a resource collection based on the specified fields.  The parameter value is a comma-separated string of attribute names, each optionally followed by a colon and \"asc\" or \"desc\".  Specify \"asc\" for ascending and \"desc\" for descending. The default value is \"asc\".  For example, ?orderBy=field1:asc,field2:desc",
        "schema": {
          "type": "string"
        }
      },
      "effectiveDate": {
        "name": "effectiveDate",
        "in": "query",
        "description": "This query parameter is used to fetch resources which are effective dated as of the specified start date. The value of this query parameter is a string having a date in yyyy-MM-dd format",
        "schema": {
          "type": "string"
        }
      },
      "REST-Framework-Version": {
        "name": "REST-Framework-Version",
        "in": "header",
        "description": "The protocol version between a REST client and service. If the client does not specify this header in the request the server will pick a default version for the API.",
        "schema": {
          "type": "string",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
          ]
        }
      },
      "Upsert-Mode": {
        "name": "Upsert-Mode",
        "in": "header",
        "description": "When set to true, the server will perform an Upsert operation instead of a Create. In an Upsert operation the server attempts to find an existing resource that matches the payload. If found, the server updates the existing resource instead of creating a new one. If not found, or when set to false (the default), a Create is performed.",
        "schema": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        }
      },
      "Effective-Of": {
        "name": "Effective-Of",
        "in": "header",
        "description": "This header accepts a string value. The string is a semi-colon separated list of <parameter-name>=<parameter-value>. It is used to perform effective date range operations. The accepted parameters are RangeMode, RangeSpan, RangeStartDate, RangeEndDate, RangeStartSequence and RangeEndSequence. The parameter values are always strings. The possible values for RangeMode are SET_LOGICAL_START, SET_LOGICAL_END, END_DATE, SET_EFFECTIVE_START, SET_EFFECTIVE_END, REPLACE_CORRECTION, REPLACE_UPDATE, RECONCILE_CORRECTION, CORRECTION, RECONCILE_UPDATE, UPDATE, ZAP and DELETE_CHANGES. The possible values for RangeSpan are PHYSICAL_ROW_END_DATE and LOGICAL_ROW_END_DATE. The values for RangeStartDate and RangeEndDate have to be a string representation of a date in yyyy-MM-dd format. The value for RangeStartSequence and RangeEndSequence must be strings such that when parsed they yield positive integers.",
        "schema": {
          "type": "string"
        }
      },
      "Metadata-Context": {
        "name": "Metadata-Context",
        "in": "header",
        "description": "If the REST API supports runtime customizations, the shape of the service may change during runtime. The REST client may isolate itself from these changes or choose to interact with the latest version of the API by specifying this header. For example: Metadata-Context:sandbox=\"TrackEmployeeFeature\".",
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "buyerPlanningItemStockouts-itemOrgStockoutCounts-request": {
        "description": "The following table describes the body parameters in the request for this task.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemOrgStockoutCountsItem"
            }
          }
        },
        "required": false
      },
      "buyerPlanningItemStockouts-itemStockoutCount-request": {
        "description": "The following table describes the body parameters in the request for this task.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemStockoutCountItem"
            }
          }
        },
        "required": false
      },
      "buyerPlanningItemStockouts-itemLocationStockouts-request": {
        "description": "The following table describes the body parameters in the request for this task.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/buyerPlanningItemStockouts-itemLocationStockoutsItem"
            }
          }
        },
        "required": false
      }
    }
  }
}
